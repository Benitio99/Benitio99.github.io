<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__controller_8py_source" xml:lang="en-US">
<title>C:/Users/unumuser/OneDrive - Institute of Technology Carlow/Software Development 4th year/Project/Repo/Context/Controller.py</title>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__controller_8py_source_1l00001"/><link linkend="_namespace_controller">00001</link> <emphasis role="stringliteral">&quot;&quot;&quot;!&#32;@brief&#32;Defines&#32;the&#32;Controller&#32;class.&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00002"/>00002 
<anchor xml:id="__controller_8py_source_1l00036"/>00036 <emphasis role="keyword">from</emphasis>&#32;transformers&#32;<emphasis role="keyword">import</emphasis>&#32;AutoTokenizer,&#32;AutoModelForMaskedLM
<anchor xml:id="__controller_8py_source_1l00037"/>00037 
<anchor xml:id="__controller_8py_source_1l00038"/>00038 <emphasis role="keyword">import</emphasis>&#32;transformers
<anchor xml:id="__controller_8py_source_1l00039"/>00039 <emphasis role="keyword">import</emphasis>&#32;joblib
<anchor xml:id="__controller_8py_source_1l00040"/>00040 <emphasis role="keyword">import</emphasis>&#32;regex
<anchor xml:id="__controller_8py_source_1l00041"/>00041 
<anchor xml:id="__controller_8py_source_1l00042"/>00042 <emphasis role="keyword">import</emphasis>&#32;nltk
<anchor xml:id="__controller_8py_source_1l00043"/>00043 
<anchor xml:id="__controller_8py_source_1l00044"/>00044 <emphasis role="keyword">from</emphasis>&#32;nltk.corpus&#32;<emphasis role="keyword">import</emphasis>&#32;wordnet
<anchor xml:id="__controller_8py_source_1l00045"/>00045 
<anchor xml:id="__controller_8py_source_1l00046"/>00046 <emphasis role="keyword">import</emphasis>&#32;joblib
<anchor xml:id="__controller_8py_source_1l00047"/>00047 <emphasis role="keyword">import</emphasis>&#32;Levenshtein&#32;<emphasis role="keyword">as</emphasis>&#32;leven
<anchor xml:id="__controller_8py_source_1l00048"/>00048 <emphasis role="keyword">from</emphasis>&#32;operator&#32;<emphasis role="keyword">import</emphasis>&#32;itemgetter
<anchor xml:id="__controller_8py_source_1l00049"/>00049 <emphasis role="keyword">import</emphasis>&#32;difflib
<anchor xml:id="__controller_8py_source_1l00050"/>00050 <emphasis role="keyword">import</emphasis>&#32;os
<anchor xml:id="__controller_8py_source_1l00051"/>00051 
<anchor xml:id="__controller_8py_source_1l00052"/>00052 nltk.download(<emphasis role="stringliteral">&quot;omw-1.4&quot;</emphasis>)
<anchor xml:id="__controller_8py_source_1l00053"/>00053 nltk.download(<emphasis role="stringliteral">&quot;words&quot;</emphasis>)
<anchor xml:id="__controller_8py_source_1l00054"/>00054 
<anchor xml:id="__controller_8py_source_1l00055"/><link linkend="_namespace_controller_1a4a852543a5f6a45daeba4cc0a6e89b92">00055</link> DATADIRECTORY&#32;=&#32;<emphasis role="stringliteral">&quot;data/&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00056"/><link linkend="_namespace_controller_1a90acebe83abcb207caabddd5c57ec933">00056</link> MODELNAME&#32;=&#32;<emphasis role="stringliteral">&quot;distilroberta-base&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00057"/><link linkend="_namespace_controller_1a78fbfe0377be4cc5daaf3537ff9420bd">00057</link> MODELLOCATION&#32;=&#32;DATADIRECTORY&#32;+&#32;MODELNAME&#32;+&#32;<emphasis role="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;MODELNAME&#32;+&#32;<emphasis role="stringliteral">&quot;Model&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00058"/><link linkend="_namespace_controller_1aa9293e0ab92c7316e2f62dd2285a4378">00058</link> TOKENIZERLOCATION&#32;=&#32;DATADIRECTORY&#32;+&#32;MODELNAME&#32;+&#32;<emphasis role="stringliteral">&quot;/&quot;</emphasis>&#32;+&#32;MODELNAME&#32;+&#32;<emphasis role="stringliteral">&quot;Tokenizer&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00059"/><link linkend="_namespace_controller_1a3773961c95a7982c623341e865b7da72">00059</link> PIPELINETYPE&#32;=&#32;<emphasis role="stringliteral">&quot;fill-mask&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00060"/>00060 <emphasis role="comment">#&#32;os.path.join(MODELLOCATION).replace(&quot;\\&quot;,&#32;&quot;/&quot;)</emphasis>
<anchor xml:id="__controller_8py_source_1l00061"/>00061 <emphasis role="comment">#&#32;os.path.join(TOKENIZERLOCATION).replace(&quot;\\&quot;,&#32;&quot;/&quot;)</emphasis>
<anchor xml:id="__controller_8py_source_1l00062"/>00062 
<anchor xml:id="__controller_8py_source_1l00063"/>00063 
<anchor xml:id="__controller_8py_source_1l00064"/><link linkend="_class_controller_1_1_controller">00064</link> <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_controller_1_1_controller">Controller</link>:
<anchor xml:id="__controller_8py_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;The&#32;Controller&#32;class.</emphasis>
<anchor xml:id="__controller_8py_source_1l00066"/>00066 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;Defines&#32;the&#32;Controller&#32;</emphasis><emphasis role="keyword">class&#32;</emphasis>that&#32;contains&#32;the&#32;main&#32;functionality&#32;of&#32;the&#32;spell&#32;checker.
<anchor xml:id="__controller_8py_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00068"/>00068 <emphasis role="stringliteral"></emphasis>
<anchor xml:id="__controller_8py_source_1l00069"/><link linkend="_class_controller_1_1_controller_1ae584317363efa29ace5c4294ff9675a2">00069</link> <emphasis role="stringliteral">&#32;&#32;&#32;&#32;</emphasis><emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1ae584317363efa29ace5c4294ff9675a2">__init__</link>(self):
<anchor xml:id="__controller_8py_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;The&#32;Controller&#32;class&#32;initializer.&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00071"/><link linkend="_class_controller_1_1_controller_1a1d3f20ab2dc1d682812c04fbbdde0ea2">00071</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a1d3f20ab2dc1d682812c04fbbdde0ea2">contextError</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00072"/><link linkend="_class_controller_1_1_controller_1a0caef8eaea886ed39a338ccdeccd71c2">00072</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a0caef8eaea886ed39a338ccdeccd71c2">wordNet</link>&#32;=&#32;wordnet
<anchor xml:id="__controller_8py_source_1l00073"/><link linkend="_class_controller_1_1_controller_1a147f1744acd980948a67709747fc382b">00073</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a147f1744acd980948a67709747fc382b">model</link>&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1af53e655391e6d2b325b1c2c6c5ee545c">loadModel</link>(MODELLOCATION)
<anchor xml:id="__controller_8py_source_1l00074"/><link linkend="_class_controller_1_1_controller_1a6e91e1c22bc68f6ce15aa145a8c6be41">00074</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a6e91e1c22bc68f6ce15aa145a8c6be41">tokenizer</link>&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1a2a06f91cbec4e350b8662b3047022248">loadTokenizer</link>(TOKENIZERLOCATION)
<anchor xml:id="__controller_8py_source_1l00075"/><link linkend="_class_controller_1_1_controller_1ac30a8a8c8a3b21f7a93142f75118f4a6">00075</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1ac30a8a8c8a3b21f7a93142f75118f4a6">pipeline</link>&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1adb9e3b63ca788d395976a8e490b39b46">createPipeline</link>()
<anchor xml:id="__controller_8py_source_1l00076"/><link linkend="_class_controller_1_1_controller_1a56ca938edde13ee70e9a2eae0b0d239a">00076</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a56ca938edde13ee70e9a2eae0b0d239a">modelResults</link>&#32;=&#32;[]
<anchor xml:id="__controller_8py_source_1l00077"/><link linkend="_class_controller_1_1_controller_1aeffc254b8725ff40b46c077df12884f3">00077</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1aeffc254b8725ff40b46c077df12884f3">modelGuessSynset</link>&#32;=&#32;[]
<anchor xml:id="__controller_8py_source_1l00078"/><link linkend="_class_controller_1_1_controller_1a2b8eabdd4ea1ac9f31368b64f72d12f4">00078</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a2b8eabdd4ea1ac9f31368b64f72d12f4">editDistances</link>&#32;=&#32;[]
<anchor xml:id="__controller_8py_source_1l00079"/><link linkend="_class_controller_1_1_controller_1a39a8f0ae9a5502e9b5f68b010b5e34c3">00079</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a39a8f0ae9a5502e9b5f68b010b5e34c3">predictedValues</link>&#32;=&#32;[]
<anchor xml:id="__controller_8py_source_1l00080"/><link linkend="_class_controller_1_1_controller_1ab7e30b0aab77c733ec3f88425d175954">00080</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1ab7e30b0aab77c733ec3f88425d175954">dictionary</link>&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1af3e9d79eac0b7cdb8f91ce5962f9d4ca">loadDictionary</link>()
<anchor xml:id="__controller_8py_source_1l00081"/><link linkend="_class_controller_1_1_controller_1a54fc49953ce72a0cbec230685dd55db3">00081</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a54fc49953ce72a0cbec230685dd55db3">similarWords</link>&#32;=&#32;[]
<anchor xml:id="__controller_8py_source_1l00082"/><link linkend="_class_controller_1_1_controller_1a30a4bb3c6517f2ff765d5b2758675bdb">00082</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a30a4bb3c6517f2ff765d5b2758675bdb">preWord</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00083"/><link linkend="_class_controller_1_1_controller_1acf95ddb8d11ce86b2a022c3e2406efaa">00083</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1acf95ddb8d11ce86b2a022c3e2406efaa">postWord</link>&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00084"/><link linkend="_class_controller_1_1_controller_1ad44ef082adb51a06959354946bb85a25">00084</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1ad44ef082adb51a06959354946bb85a25">wordSet</link>&#32;=&#32;set()
<anchor xml:id="__controller_8py_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nltk.download(<emphasis role="stringliteral">&quot;wordnet&quot;</emphasis>)
<anchor xml:id="__controller_8py_source_1l00086"/>00086 
<anchor xml:id="__controller_8py_source_1l00087"/><link linkend="_class_controller_1_1_controller_1ad7ae95554134cd1f338934446ba5cb2f">00087</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1ad7ae95554134cd1f338934446ba5cb2f">addMask</link>(self,&#32;input):
<anchor xml:id="__controller_8py_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Replaces&#32;the&#32;[*]&#32;contained&#32;input&#32;with&#32;a&#32;mask&#32;from&#32;the&#32;tokeniser.</emphasis>
<anchor xml:id="__controller_8py_source_1l00089"/>00089 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@param</emphasis>&#32;input&#32;&#32;The&#32;complete&#32;input&#32;given&#32;by&#32;the&#32;user
<anchor xml:id="__controller_8py_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00091"/>00091 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;mask&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1a6e91e1c22bc68f6ce15aa145a8c6be41">tokenizer</link>.mask_token</emphasis>
<anchor xml:id="__controller_8py_source_1l00092"/>00092 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;input&#32;=&#32;regex.sub(&quot;[[A-Za-z]+]&quot;</emphasis>,&#32;mask,&#32;input)
<anchor xml:id="__controller_8py_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;input
<anchor xml:id="__controller_8py_source_1l00094"/>00094 
<anchor xml:id="__controller_8py_source_1l00095"/><link linkend="_class_controller_1_1_controller_1aaca6af6776f1c22c159a8427de18d4e6">00095</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1aaca6af6776f1c22c159a8427de18d4e6">containsError</link>(self,&#32;input):
<anchor xml:id="__controller_8py_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Returns&#32;True&#32;if&#32;the&#32;user&#32;given&#32;input&#32;has&#32;[*]&#32;contained&#32;within&#32;the&#32;input.</emphasis>
<anchor xml:id="__controller_8py_source_1l00097"/>00097 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@param</emphasis>&#32;input&#32;&#32;The&#32;complete&#32;input&#32;given&#32;by&#32;the&#32;user
<anchor xml:id="__controller_8py_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00099"/>00099 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pattern&#32;=&#32;&quot;[[A-Za-z]+]&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;regex.search(pattern,&#32;input):
<anchor xml:id="__controller_8py_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">True</emphasis>
<anchor xml:id="__controller_8py_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="__controller_8py_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">False</emphasis>
<anchor xml:id="__controller_8py_source_1l00104"/>00104 
<anchor xml:id="__controller_8py_source_1l00105"/><link linkend="_class_controller_1_1_controller_1adb9e3b63ca788d395976a8e490b39b46">00105</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1adb9e3b63ca788d395976a8e490b39b46">createPipeline</link>(self):
<anchor xml:id="__controller_8py_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Creates&#32;a&#32;transformer&#32;pipeline&#32;for&#32;the&#32;model.&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pipeline&#32;=&#32;transformers.pipeline(
<anchor xml:id="__controller_8py_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PIPELINETYPE,&#32;model=self.<link linkend="_class_controller_1_1_controller_1a147f1744acd980948a67709747fc382b">model</link>,&#32;tokenizer=self.<link linkend="_class_controller_1_1_controller_1a6e91e1c22bc68f6ce15aa145a8c6be41">tokenizer</link>
<anchor xml:id="__controller_8py_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
<anchor xml:id="__controller_8py_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pipeline
<anchor xml:id="__controller_8py_source_1l00111"/>00111 
<anchor xml:id="__controller_8py_source_1l00112"/><link linkend="_class_controller_1_1_controller_1a6a13327da753028156eec821f1852dc8">00112</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1a6a13327da753028156eec821f1852dc8">crossCheck</link>(self,&#32;input):
<anchor xml:id="__controller_8py_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Replaces&#32;the&#32;[*]&#32;contained&#32;input&#32;with&#32;a&#32;mask&#32;from&#32;the&#32;tokeniser.</emphasis>
<anchor xml:id="__controller_8py_source_1l00114"/>00114 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@param</emphasis>&#32;input&#32;The&#32;complete&#32;input&#32;given&#32;by&#32;the&#32;user
<anchor xml:id="__controller_8py_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00116"/>00116 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;similarWords&#32;=&#32;difflib.get_close_matches(input,&#32;self.<link linkend="_class_controller_1_1_controller_1ab7e30b0aab77c733ec3f88425d175954">dictionary</link>)</emphasis>
<anchor xml:id="__controller_8py_source_1l00117"/>00117 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;similarWords
<anchor xml:id="__controller_8py_source_1l00118"/>00118 
<anchor xml:id="__controller_8py_source_1l00119"/><link linkend="_class_controller_1_1_controller_1afea363d31beb9f56ab6ba7cbe9318938">00119</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1afea363d31beb9f56ab6ba7cbe9318938">extractWord</link>(self,&#32;input):
<anchor xml:id="__controller_8py_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Returns&#32;only&#32;the&#32;contents&#32;of&#32;[*]&#32;contained&#32;within&#32;the&#32;input&#32;given&#32;by&#32;the&#32;user.</emphasis>
<anchor xml:id="__controller_8py_source_1l00121"/>00121 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@param</emphasis>&#32;input&#32;&#32;The&#32;complete&#32;input&#32;given&#32;by&#32;the&#32;user
<anchor xml:id="__controller_8py_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00123"/>00123 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;input[input.find(<emphasis role="stringliteral">&quot;[&quot;</emphasis>)&#32;+&#32;1&#32;:&#32;input.find(<emphasis role="stringliteral">&quot;]&quot;</emphasis>)]
<anchor xml:id="__controller_8py_source_1l00124"/>00124 
<anchor xml:id="__controller_8py_source_1l00125"/><link linkend="_class_controller_1_1_controller_1af46f7f314af5aef8d5d35e388232dfc6">00125</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1af46f7f314af5aef8d5d35e388232dfc6">extractPreAndPost</link>(self,&#32;input):
<anchor xml:id="__controller_8py_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Returns&#32;the&#32;word&#32;before&#32;the&#32;error&#32;and&#32;the&#32;next&#32;word&#32;after&#32;the&#32;error.</emphasis>
<anchor xml:id="__controller_8py_source_1l00127"/>00127 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@param</emphasis>&#32;input&#32;&#32;The&#32;complete&#32;input&#32;given&#32;by&#32;the&#32;user
<anchor xml:id="__controller_8py_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00129"/>00129 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;beforeAndAfter&#32;=&#32;input.split(&quot;[&quot;</emphasis>&#32;+&#32;str(self.<link linkend="_class_controller_1_1_controller_1a1d3f20ab2dc1d682812c04fbbdde0ea2">contextError</link>)&#32;+&#32;<emphasis role="stringliteral">&quot;]&quot;</emphasis>)
<anchor xml:id="__controller_8py_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;before&#32;=&#32;beforeAndAfter[0]
<anchor xml:id="__controller_8py_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;after&#32;=&#32;beforeAndAfter[1]
<anchor xml:id="__controller_8py_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pre,&#32;post&#32;=&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;len(before)&#32;&gt;&#32;2:
<anchor xml:id="__controller_8py_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pre&#32;=&#32;before.split(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>)[-2]
<anchor xml:id="__controller_8py_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;pre[:-1]&#32;==&#32;<emphasis role="stringliteral">&quot;,&quot;</emphasis>:
<anchor xml:id="__controller_8py_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;post&#32;=&#32;post[:-1]
<anchor xml:id="__controller_8py_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;len(after)&#32;&gt;&#32;2:
<anchor xml:id="__controller_8py_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;post&#32;=&#32;after.split(<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>)[1]
<anchor xml:id="__controller_8py_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;char&#32;<emphasis role="keywordflow">in</emphasis>&#32;post:
<anchor xml:id="__controller_8py_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;char&#32;<emphasis role="keywordflow">in</emphasis>&#32;<emphasis role="stringliteral">&quot;?.!/;:&quot;</emphasis>:
<anchor xml:id="__controller_8py_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;post&#32;=&#32;post.replace(char,&#32;<emphasis role="stringliteral">&quot;&quot;</emphasis>)
<anchor xml:id="__controller_8py_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pre,&#32;post
<anchor xml:id="__controller_8py_source_1l00143"/>00143 
<anchor xml:id="__controller_8py_source_1l00144"/><link linkend="_class_controller_1_1_controller_1a179aa818497a96016997c95b44ed1d3d">00144</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1a179aa818497a96016997c95b44ed1d3d">fitData</link>(self,&#32;input):
<anchor xml:id="__controller_8py_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
<anchor xml:id="__controller_8py_source_1l00146"/>00146 
<anchor xml:id="__controller_8py_source_1l00147"/><link linkend="_class_controller_1_1_controller_1a786551a4b53767e916ac06c06a4c20ed">00147</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1a786551a4b53767e916ac06c06a4c20ed">getEditDistance</link>(self,&#32;originalWord,&#32;stringCompared):
<anchor xml:id="__controller_8py_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Returns&#32;the&#32;edit&#32;distance&#32;between&#32;the&#32;original&#32;word&#32;and&#32;the&#32;string&#32;compared.</emphasis>
<anchor xml:id="__controller_8py_source_1l00149"/>00149 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@param</emphasis>&#32;originalWord&#32;&#32;The&#32;original&#32;word&#32;given&#32;by&#32;the&#32;user
<anchor xml:id="__controller_8py_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="preprocessor">@param</emphasis>&#32;stringCompared&#32;&#32;The&#32;string&#32;to&#32;be&#32;compared&#32;to&#32;the&#32;original&#32;word
<anchor xml:id="__controller_8py_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00152"/>00152 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">if</emphasis>&#32;len(originalWord)&#32;&lt;&#32;len(stringCompared):
<anchor xml:id="__controller_8py_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;self.getEditDistance(stringCompared,&#32;originalWord)
<anchor xml:id="__controller_8py_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;When&#32;the&#32;originalWord&#32;is&#32;longer&#32;than&#32;the&#32;word&#32;to&#32;be&#32;compared&#32;with</emphasis>
<anchor xml:id="__controller_8py_source_1l00155"/>00155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;len(stringCompared)&#32;==&#32;0:
<anchor xml:id="__controller_8py_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;len(originalWord)
<anchor xml:id="__controller_8py_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;previousRow&#32;=&#32;range(len(stringCompared)&#32;+&#32;1)
<anchor xml:id="__controller_8py_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;originalWordindex,&#32;charOne&#32;<emphasis role="keywordflow">in</emphasis>&#32;enumerate(originalWord):
<anchor xml:id="__controller_8py_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentRow&#32;=&#32;[originalWordindex&#32;+&#32;1]
<anchor xml:id="__controller_8py_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;comparedWordIndex,&#32;charTwo&#32;<emphasis role="keywordflow">in</emphasis>&#32;enumerate(stringCompared):
<anchor xml:id="__controller_8py_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;insertions&#32;=&#32;previous_row[comparedWordIndex&#32;+&#32;1]&#32;+&#32;1
<anchor xml:id="__controller_8py_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deletions&#32;=&#32;currentRow[comparedWordIndex]&#32;+&#32;1
<anchor xml:id="__controller_8py_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;substitutions&#32;=&#32;previous_row[comparedWordIndex]&#32;+&#32;(charOne&#32;!=&#32;charTwo)
<anchor xml:id="__controller_8py_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentRow.append(min(insertions,&#32;deletions,&#32;substitutions))
<anchor xml:id="__controller_8py_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;previous_row&#32;=&#32;currentRow
<anchor xml:id="__controller_8py_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;previous_row[-1]
<anchor xml:id="__controller_8py_source_1l00167"/>00167 
<anchor xml:id="__controller_8py_source_1l00168"/><link linkend="_class_controller_1_1_controller_1aa59e5b734bcbd927d121f8928a52ede7">00168</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1aa59e5b734bcbd927d121f8928a52ede7">getEditDistanceList</link>(self):
<anchor xml:id="__controller_8py_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Returns&#32;a&#32;list&#32;of&#32;the&#32;all&#32;potential&#32;words&#32;with&#32;the&#32;edit&#32;distances&#32;between&#32;the&#32;potential&#32;word&#32;and&#32;the&#32;original&#32;error.&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;synsetList&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1a35f6a1e97c4d9f52549ad22b723ac427">modelResultsSynset</link>
<anchor xml:id="__controller_8py_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;originalWord&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1a1d3f20ab2dc1d682812c04fbbdde0ea2">contextError</link>
<anchor xml:id="__controller_8py_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;editDistances&#32;=&#32;[]
<anchor xml:id="__controller_8py_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;word&#32;<emphasis role="keywordflow">in</emphasis>&#32;synsetList:
<anchor xml:id="__controller_8py_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;distance&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1a5dfc2051795ea4ec97417ba222f57697">shortGetEditDistance</link>(originalWord,&#32;word)
<anchor xml:id="__controller_8py_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;editDistances.append(distance)
<anchor xml:id="__controller_8py_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;combinedList&#32;=&#32;list(zip(synsetList,&#32;editDistances))
<anchor xml:id="__controller_8py_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;combinedList
<anchor xml:id="__controller_8py_source_1l00178"/>00178 
<anchor xml:id="__controller_8py_source_1l00179"/><link linkend="_class_controller_1_1_controller_1a44ec9d1e8a24e62eea33bc10a562c459">00179</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1a44ec9d1e8a24e62eea33bc10a562c459">getError</link>(self,&#32;input):
<anchor xml:id="__controller_8py_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
<anchor xml:id="__controller_8py_source_1l00181"/>00181 
<anchor xml:id="__controller_8py_source_1l00182"/><link linkend="_class_controller_1_1_controller_1a6cd1bb1533b44039e67913d2b54a01a6">00182</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1a6cd1bb1533b44039e67913d2b54a01a6">getModelPredictions</link>(self,&#32;input):
<anchor xml:id="__controller_8py_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Returns&#32;a&#32;list&#32;of&#32;the&#32;models&#32;predictions&#32;based&#32;on&#32;the&#32;input&#32;given&#32;by&#32;the&#32;user.</emphasis>
<anchor xml:id="__controller_8py_source_1l00184"/>00184 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@param</emphasis>&#32;input&#32;&#32;The&#32;complete&#32;input&#32;given&#32;by&#32;the&#32;user
<anchor xml:id="__controller_8py_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00186"/>00186 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;self.pipeline(input)
<anchor xml:id="__controller_8py_source_1l00187"/>00187 
<anchor xml:id="__controller_8py_source_1l00188"/><link linkend="_class_controller_1_1_controller_1a6d7024660385fa85ea0f5dd1a8cf715b">00188</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1a6d7024660385fa85ea0f5dd1a8cf715b">getSimilarWords</link>(self,&#32;input):
<anchor xml:id="__controller_8py_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Replaces&#32;the&#32;[*]&#32;contained&#32;input&#32;with&#32;a&#32;mask&#32;from&#32;the&#32;tokeniser.</emphasis>
<anchor xml:id="__controller_8py_source_1l00190"/>00190 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@param</emphasis>&#32;input&#32;&#32;The&#32;complete&#32;input&#32;given&#32;by&#32;the&#32;user
<anchor xml:id="__controller_8py_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00192"/>00192 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;similarWords&#32;=&#32;set()</emphasis>
<anchor xml:id="__controller_8py_source_1l00193"/>00193 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;similarWords&#32;=&#32;difflib.get_close_matches(input,&#32;self.<link linkend="_class_controller_1_1_controller_1ab7e30b0aab77c733ec3f88425d175954">dictionary</link>)</emphasis>
<anchor xml:id="__controller_8py_source_1l00194"/>00194 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;similarWords
<anchor xml:id="__controller_8py_source_1l00195"/>00195 
<anchor xml:id="__controller_8py_source_1l00196"/><link linkend="_class_controller_1_1_controller_1ab8ae7bb8f2e1e7f06a3f08bc0632050b">00196</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1ab8ae7bb8f2e1e7f06a3f08bc0632050b">getSynsets</link>(self,&#32;guessedWords):
<anchor xml:id="__controller_8py_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Loads&#32;and&#32;Returns&#32;the&#32;model&#32;for&#32;use&#32;by&#32;the&#32;program&#32;from&#32;hugginface.com.</emphasis>
<anchor xml:id="__controller_8py_source_1l00198"/>00198 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@param</emphasis>&#32;guessedWords&#32;A&#32;list&#32;of&#32;potential&#32;Guesses
<anchor xml:id="__controller_8py_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00200"/>00200 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guesses&#32;=&#32;set()</emphasis>
<anchor xml:id="__controller_8py_source_1l00201"/>00201 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wordList&#32;=&#32;set()</emphasis>
<anchor xml:id="__controller_8py_source_1l00202"/>00202 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">for</emphasis>&#32;guess&#32;<emphasis role="keywordflow">in</emphasis>&#32;guessedWords:
<anchor xml:id="__controller_8py_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;guesses.add(guess)
<anchor xml:id="__controller_8py_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;guess&#32;<emphasis role="keywordflow">in</emphasis>&#32;guesses:
<anchor xml:id="__controller_8py_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wordList.add(guess)
<anchor xml:id="__controller_8py_source_1l00206"/>00206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;synsets&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1a0caef8eaea886ed39a338ccdeccd71c2">wordNet</link>.synsets(guess)
<anchor xml:id="__controller_8py_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;synset&#32;<emphasis role="keywordflow">in</emphasis>&#32;synsets:
<anchor xml:id="__controller_8py_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;lemma&#32;<emphasis role="keywordflow">in</emphasis>&#32;synset.lemmas():
<anchor xml:id="__controller_8py_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(str(lemma.name())&#32;+&#32;<emphasis role="stringliteral">&quot;,&#32;&quot;</emphasis>,&#32;end=<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>)
<anchor xml:id="__controller_8py_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wordList.add(lemma.name().strip().replace(<emphasis role="stringliteral">&quot;_&quot;</emphasis>,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>).lower())
<anchor xml:id="__controller_8py_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;wordList
<anchor xml:id="__controller_8py_source_1l00212"/>00212 
<anchor xml:id="__controller_8py_source_1l00213"/><link linkend="_class_controller_1_1_controller_1af3e9d79eac0b7cdb8f91ce5962f9d4ca">00213</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1af3e9d79eac0b7cdb8f91ce5962f9d4ca">loadDictionary</link>(self):
<anchor xml:id="__controller_8py_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Loads&#32;and&#32;Returns&#32;the&#32;dictionary&#32;for&#32;use&#32;by&#32;the&#32;program&#32;based&#32;on&#32;the&#32;nltk&#32;corpus.&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00215"/>00215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dictionary&#32;=&#32;set(w.lower()&#32;<emphasis role="keywordflow">for</emphasis>&#32;w&#32;<emphasis role="keywordflow">in</emphasis>&#32;nltk.corpus.words.words())
<anchor xml:id="__controller_8py_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dictionary
<anchor xml:id="__controller_8py_source_1l00217"/>00217 
<anchor xml:id="__controller_8py_source_1l00218"/><link linkend="_class_controller_1_1_controller_1a22d89b586f67574be91e5932f74a56d6">00218</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1a22d89b586f67574be91e5932f74a56d6">loadBaseModel</link>(self):
<anchor xml:id="__controller_8py_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Loads&#32;and&#32;Returns&#32;the&#32;model&#32;for&#32;use&#32;by&#32;the&#32;program&#32;from&#32;hugginface.com.&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;model&#32;=&#32;AutoModelForMaskedLM.from_pretrained(MODELNAME)
<anchor xml:id="__controller_8py_source_1l00221"/>00221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;model
<anchor xml:id="__controller_8py_source_1l00222"/>00222 
<anchor xml:id="__controller_8py_source_1l00223"/><link linkend="_class_controller_1_1_controller_1a01287a6cf026161bdcf462908477d349">00223</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1a01287a6cf026161bdcf462908477d349">loadBaseTokenizer</link>(self):
<anchor xml:id="__controller_8py_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Loads&#32;and&#32;Returns&#32;the&#32;tokenizer&#32;for&#32;use&#32;by&#32;the&#32;program&#32;from&#32;hugginface.com.&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tokenizer&#32;=&#32;AutoTokenizer.from_pretrained(MODELNAME)
<anchor xml:id="__controller_8py_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;tokenizer
<anchor xml:id="__controller_8py_source_1l00227"/>00227 
<anchor xml:id="__controller_8py_source_1l00228"/><link linkend="_class_controller_1_1_controller_1af53e655391e6d2b325b1c2c6c5ee545c">00228</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1af53e655391e6d2b325b1c2c6c5ee545c">loadModel</link>(self,&#32;path):
<anchor xml:id="__controller_8py_source_1l00229"/>00229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Loads&#32;and&#32;Returns&#32;the&#32;prepared&#32;model&#32;for&#32;use&#32;by&#32;the&#32;program</emphasis>
<anchor xml:id="__controller_8py_source_1l00230"/>00230 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@param</emphasis>&#32;path&#32;&#32;The&#32;directory&#32;path&#32;of&#32;the&#32;model
<anchor xml:id="__controller_8py_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00232"/>00232 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;joblib.load(path)
<anchor xml:id="__controller_8py_source_1l00233"/>00233 
<anchor xml:id="__controller_8py_source_1l00234"/><link linkend="_class_controller_1_1_controller_1a2a06f91cbec4e350b8662b3047022248">00234</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1a2a06f91cbec4e350b8662b3047022248">loadTokenizer</link>(self,&#32;path):
<anchor xml:id="__controller_8py_source_1l00235"/>00235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Loads&#32;and&#32;Returns&#32;the&#32;prepared&#32;tokenizer&#32;that&#32;corresponds&#32;to&#32;the&#32;the&#32;model&#32;for&#32;use&#32;by&#32;the&#32;program</emphasis>
<anchor xml:id="__controller_8py_source_1l00236"/>00236 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@param</emphasis>&#32;path&#32;&#32;The&#32;directory&#32;path&#32;of&#32;the&#32;tokenizer
<anchor xml:id="__controller_8py_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00238"/>00238 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;joblib.load(path)
<anchor xml:id="__controller_8py_source_1l00239"/>00239 
<anchor xml:id="__controller_8py_source_1l00240"/><link linkend="_class_controller_1_1_controller_1a3e7e76ff118b519ace9caa49d5885b71">00240</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1a3e7e76ff118b519ace9caa49d5885b71">processInput</link>(self,&#32;input:&#32;str):
<anchor xml:id="__controller_8py_source_1l00241"/>00241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Main&#32;functionality&#32;of&#32;the&#32;program&#32;that&#32;processes&#32;the&#32;input&#32;given&#32;by&#32;the&#32;user.</emphasis>
<anchor xml:id="__controller_8py_source_1l00242"/>00242 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@type</emphasis>&#32;input:&#32;str
<anchor xml:id="__controller_8py_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="preprocessor">@param</emphasis>&#32;input&#32;&#32;The&#32;complete&#32;input&#32;given&#32;by&#32;the&#32;user
<anchor xml:id="__controller_8py_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00245"/>00245 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">if</emphasis>&#32;self.<link linkend="_class_controller_1_1_controller_1aaca6af6776f1c22c159a8427de18d4e6">containsError</link>(input):
<anchor xml:id="__controller_8py_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;gets&#32;the&#32;word&#32;that&#32;is&#32;the&#32;error</emphasis>
<anchor xml:id="__controller_8py_source_1l00247"/>00247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a1d3f20ab2dc1d682812c04fbbdde0ea2">contextError</link>&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1afea363d31beb9f56ab6ba7cbe9318938">extractWord</link>(input)
<anchor xml:id="__controller_8py_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;get&#32;word&#32;before&#32;the&#32;error&#32;and&#32;after&#32;the&#32;error</emphasis>
<anchor xml:id="__controller_8py_source_1l00249"/>00249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a30a4bb3c6517f2ff765d5b2758675bdb">preWord</link>,&#32;self.<link linkend="_class_controller_1_1_controller_1acf95ddb8d11ce86b2a022c3e2406efaa">postWord</link>&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1af46f7f314af5aef8d5d35e388232dfc6">extractPreAndPost</link>(input)
<anchor xml:id="__controller_8py_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;replaces&#32;the&#32;error&#32;with&#32;an&#32;appropriate&#32;mask</emphasis>
<anchor xml:id="__controller_8py_source_1l00251"/><link linkend="_class_controller_1_1_controller_1a664d2bba1b9baee6672e0e233bffb8aa">00251</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a664d2bba1b9baee6672e0e233bffb8aa">maskedInput</link>&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1ad7ae95554134cd1f338934446ba5cb2f">addMask</link>(input)
<anchor xml:id="__controller_8py_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;get&#32;the&#32;model&#32;predictions</emphasis>
<anchor xml:id="__controller_8py_source_1l00253"/>00253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a56ca938edde13ee70e9a2eae0b0d239a">modelResults</link>&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1a6cd1bb1533b44039e67913d2b54a01a6">getModelPredictions</link>(self.<link linkend="_class_controller_1_1_controller_1a664d2bba1b9baee6672e0e233bffb8aa">maskedInput</link>)
<anchor xml:id="__controller_8py_source_1l00254"/><link linkend="_class_controller_1_1_controller_1a35f6a1e97c4d9f52549ad22b723ac427">00254</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a35f6a1e97c4d9f52549ad22b723ac427">modelResultsSynset</link>&#32;=&#32;[]
<anchor xml:id="__controller_8py_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;for&#32;each&#32;prediction&#32;made:</emphasis>
<anchor xml:id="__controller_8py_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;prediction&#32;<emphasis role="keywordflow">in</emphasis>&#32;self.<link linkend="_class_controller_1_1_controller_1a56ca938edde13ee70e9a2eae0b0d239a">modelResults</link>:
<anchor xml:id="__controller_8py_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;gets&#32;the&#32;predicted&#32;word</emphasis>
<anchor xml:id="__controller_8py_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prediction&#32;=&#32;prediction.get(<emphasis role="stringliteral">&quot;token_str&quot;</emphasis>).strip()
<anchor xml:id="__controller_8py_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;creates&#32;a&#32;list&#32;of&#32;three&#32;words&#32;to&#32;create&#32;two&#32;bigrams&#32;for&#32;comparison</emphasis>
<anchor xml:id="__controller_8py_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bigramRawInputList&#32;=&#32;[]
<anchor xml:id="__controller_8py_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bigramRawInputList.append(self.<link linkend="_class_controller_1_1_controller_1a30a4bb3c6517f2ff765d5b2758675bdb">preWord</link>)
<anchor xml:id="__controller_8py_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bigramRawInputList.append(prediction)
<anchor xml:id="__controller_8py_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bigramRawInputList.append(self.<link linkend="_class_controller_1_1_controller_1acf95ddb8d11ce86b2a022c3e2406efaa">postWord</link>)
<anchor xml:id="__controller_8py_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bigramList&#32;=&#32;list(nltk.bigrams(bigramRawInputList))
<anchor xml:id="__controller_8py_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bigramJoinedList&#32;=&#32;[]
<anchor xml:id="__controller_8py_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;joins&#32;words&#32;with&#32;a&#32;space&#32;for&#32;each&#32;bigram</emphasis>
<anchor xml:id="__controller_8py_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;bigram&#32;<emphasis role="keywordflow">in</emphasis>&#32;bigramList:
<anchor xml:id="__controller_8py_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bigram&#32;=&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>.join(bigram)
<anchor xml:id="__controller_8py_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bigramJoinedList.append(bigram)
<anchor xml:id="__controller_8py_source_1l00270"/>00270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bigramFinalList&#32;=&#32;bigramJoinedList[:]
<anchor xml:id="__controller_8py_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bigramFinalList.append(prediction)
<anchor xml:id="__controller_8py_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;gets&#32;the&#32;synsets&#32;for&#32;each&#32;bigram&#32;in&#32;the&#32;list</emphasis>
<anchor xml:id="__controller_8py_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bigramListResults&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1ab8ae7bb8f2e1e7f06a3f08bc0632050b">getSynsets</link>(bigramFinalList)
<anchor xml:id="__controller_8py_source_1l00274"/>00274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Filter&#32;out&#32;the&#32;bigrams&#32;only</emphasis>
<anchor xml:id="__controller_8py_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;word&#32;<emphasis role="keywordflow">in</emphasis>&#32;list(bigramListResults):
<anchor xml:id="__controller_8py_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;bigram&#32;<emphasis role="keywordflow">in</emphasis>&#32;bigramJoinedList:
<anchor xml:id="__controller_8py_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;word&#32;==&#32;bigram:
<anchor xml:id="__controller_8py_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bigramListResults.remove(word)
<anchor xml:id="__controller_8py_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;appends&#32;the&#32;synsets&#32;to&#32;the&#32;full&#32;list&#32;of&#32;synsets</emphasis>
<anchor xml:id="__controller_8py_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;result&#32;<emphasis role="keywordflow">in</emphasis>&#32;bigramListResults:
<anchor xml:id="__controller_8py_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a35f6a1e97c4d9f52549ad22b723ac427">modelResultsSynset</link>.append(result)
<anchor xml:id="__controller_8py_source_1l00282"/>00282 
<anchor xml:id="__controller_8py_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Filter&#32;out&#32;any&#32;duplicates&#32;that&#32;may&#32;be&#32;present</emphasis>
<anchor xml:id="__controller_8py_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a35f6a1e97c4d9f52549ad22b723ac427">modelResultsSynset</link>&#32;=&#32;list(set(self.<link linkend="_class_controller_1_1_controller_1a35f6a1e97c4d9f52549ad22b723ac427">modelResultsSynset</link>))
<anchor xml:id="__controller_8py_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;returns&#32;a&#32;set&#32;of&#32;lists&#32;that&#32;adds&#32;the&#32;edit&#32;distance&#32;to&#32;each&#32;word&#32;in&#32;the&#32;set</emphasis>
<anchor xml:id="__controller_8py_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a2b8eabdd4ea1ac9f31368b64f72d12f4">editDistances</link>&#32;=&#32;self.<link linkend="_class_controller_1_1_controller_1aa59e5b734bcbd927d121f8928a52ede7">getEditDistanceList</link>()
<anchor xml:id="__controller_8py_source_1l00287"/>00287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;sorts&#32;the&#32;list&#32;according&#32;to&#32;the&#32;edit&#32;distance&#32;in&#32;ascending&#32;order</emphasis>
<anchor xml:id="__controller_8py_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1af44c825436585bbcd07455352e9dc8e7">sortEditDistances</link>()
<anchor xml:id="__controller_8py_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">#&#32;Return&#32;the&#32;top&#32;10&#32;results&#32;by&#32;shortest&#32;edit&#32;distance&#32;compared&#32;to&#32;the&#32;error</emphasis>
<anchor xml:id="__controller_8py_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;self.<link linkend="_class_controller_1_1_controller_1a2b8eabdd4ea1ac9f31368b64f72d12f4">editDistances</link>[:10]
<anchor xml:id="__controller_8py_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>:
<anchor xml:id="__controller_8py_source_1l00292"/>00292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">pass</emphasis>
<anchor xml:id="__controller_8py_source_1l00293"/>00293 
<anchor xml:id="__controller_8py_source_1l00294"/><link linkend="_class_controller_1_1_controller_1a5dfc2051795ea4ec97417ba222f57697">00294</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1a5dfc2051795ea4ec97417ba222f57697">shortGetEditDistance</link>(self,&#32;originalWord,&#32;stringCompared):
<anchor xml:id="__controller_8py_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;Gets&#32;the&#32;edit&#32;distance&#32;required&#32;to&#32;change&#32;strignCompared&#32;into&#32;original&#32;Word&#32;using&#32;the&#32;levenshtein&#32;method</emphasis>
<anchor xml:id="__controller_8py_source_1l00296"/>00296 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="preprocessor">@param</emphasis>&#32;originalWord&#32;&#32;The&#32;word&#32;to&#32;be&#32;compared&#32;to
<anchor xml:id="__controller_8py_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="preprocessor">@param</emphasis>&#32;stringCompared&#32;&#32;The&#32;word&#32;to&#32;be&#32;compared&#32;to&#32;the&#32;original&#32;word
<anchor xml:id="__controller_8py_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="preprocessor">@return</emphasis>&#32;The&#32;edit&#32;distance&#32;between&#32;the&#32;two&#32;words
<anchor xml:id="__controller_8py_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00300"/>00300 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;originalWord&#32;=&#32;originalWord.lower()</emphasis>
<anchor xml:id="__controller_8py_source_1l00301"/>00301 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stringCompared&#32;=&#32;stringCompared.lower()</emphasis>
<anchor xml:id="__controller_8py_source_1l00302"/>00302 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;distance&#32;=&#32;leven.distance(originalWord,&#32;stringCompared)</emphasis>
<anchor xml:id="__controller_8py_source_1l00303"/>00303 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="keywordflow">return</emphasis>&#32;distance
<anchor xml:id="__controller_8py_source_1l00304"/>00304 
<anchor xml:id="__controller_8py_source_1l00305"/><link linkend="_class_controller_1_1_controller_1abcb06d1dc6adaa1b7cb78a6e3db227df">00305</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1abcb06d1dc6adaa1b7cb78a6e3db227df">show</link>(self):
<anchor xml:id="__controller_8py_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;prints&#32;all&#32;main&#32;data&#32;members&#32;of&#32;the&#32;class&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(self.<link linkend="_class_controller_1_1_controller_1a56ca938edde13ee70e9a2eae0b0d239a">modelResults</link>)
<anchor xml:id="__controller_8py_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(self.<link linkend="_class_controller_1_1_controller_1a0caef8eaea886ed39a338ccdeccd71c2">wordNet</link>)
<anchor xml:id="__controller_8py_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(self.<link linkend="_class_controller_1_1_controller_1aeffc254b8725ff40b46c077df12884f3">modelGuessSynset</link>)
<anchor xml:id="__controller_8py_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(self.<link linkend="_class_controller_1_1_controller_1a2b8eabdd4ea1ac9f31368b64f72d12f4">editDistances</link>)
<anchor xml:id="__controller_8py_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(self.<link linkend="_class_controller_1_1_controller_1a147f1744acd980948a67709747fc382b">model</link>)
<anchor xml:id="__controller_8py_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(self.<link linkend="_class_controller_1_1_controller_1a6e91e1c22bc68f6ce15aa145a8c6be41">tokenizer</link>)
<anchor xml:id="__controller_8py_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print(self.<link linkend="_class_controller_1_1_controller_1ac30a8a8c8a3b21f7a93142f75118f4a6">pipeline</link>)
<anchor xml:id="__controller_8py_source_1l00314"/>00314 
<anchor xml:id="__controller_8py_source_1l00315"/><link linkend="_class_controller_1_1_controller_1af44c825436585bbcd07455352e9dc8e7">00315</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">def&#32;</emphasis><link linkend="_class_controller_1_1_controller_1af44c825436585bbcd07455352e9dc8e7">sortEditDistances</link>(self):
<anchor xml:id="__controller_8py_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="stringliteral">&quot;&quot;&quot;!&#32;sorts&#32;the&#32;list&#32;of&#32;lists&#32;by&#32;the&#32;edit&#32;distance&#32;in&#32;ascending&#32;order&quot;&quot;&quot;</emphasis>
<anchor xml:id="__controller_8py_source_1l00317"/>00317 <emphasis role="stringliteral">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="_class_controller_1_1_controller_1a2b8eabdd4ea1ac9f31368b64f72d12f4">editDistances</link>.sort(key=itemgetter(1))</emphasis>
</programlisting></section>
